#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on 11/20/15

@author: sampfeiffer

catkin_create_pkg_advanced is an improvement to
catkin_create_pkg that adds some stuff I usually need:
- Python stuff
- launch stuff
- config stuff
- dynamic reconfigure stuff

It starts as a pure copy of the catkin_create_pkg
and then adds stuff
"""

from __future__ import print_function
import argparse
import os
import sys
from rospkg import RosPack, ResourceNotFound
from shutil import move, rmtree
from distutils.dir_util import copy_tree

from catkin_pkg.package_templates import create_package_files, PackageTemplate

def replace_text(file_with_path, old_text, new_text):
    print(file_with_path + ' will have replaced \'' + old_text + '\'' +
          ' with \'' + new_text + '\'')
    with open(file_with_path, 'r') as f:
        contents = f.read()
        replaced_contents = contents.replace(old_text, new_text)
    with open(file_with_path, 'w') as f:
        f.write(replaced_contents)


def main(argv=sys.argv[1:], parent_path=os.getcwd()):
    parser = argparse.ArgumentParser(
        description='Creates a new catkin package')
    parser.add_argument('name',
                        nargs=1,
                        help='The name for the package')
    parser.add_argument('--meta',
                        action='store_true',
                        help='Creates meta-package files')
    parser.add_argument('dependencies',
                        nargs='*',
                        help='Catkin package Dependencies')
    parser.add_argument('-s', '--sys-deps',
                        nargs='*',
                        help='System Dependencies')
    parser.add_argument('-b', '--boost-comps',
                        nargs='*',
                        help='Boost Components')
    parser.add_argument('-V', '--pkg_version',
                        action='store',
                        help='Initial Package version')
    parser.add_argument('-D', '--description',
                        action='store',
                        help='Description')
    parser.add_argument('-l', '--license',
                        action='append',
                        help='Name for License, (e.g. BSD, MIT, GPLv3...)')
    parser.add_argument('-a', '--author',
                        action='append',
                        help='A single author, may be used multiple times')
    parser.add_argument('-m', '--maintainer',
                        action='append',
                        help='A single maintainer, may be used multiple times')
    rosdistro_name = os.environ['ROS_DISTRO'] if 'ROS_DISTRO' in os.environ else None
    parser.add_argument('--rosdistro', required=rosdistro_name is None, default=rosdistro_name, help='The ROS distro (default: environment variable ROS_DISTRO if defined)')

    args = parser.parse_args(argv)

    # Check if cpp/python example needed
    use_roscpp = 'roscpp' in args.dependencies

    use_rospy = 'rospy' in args.dependencies

    # add potentially missing deps for the cpp template to compile
    if use_roscpp:
        if not 'tf' in args.dependencies:
            args.dependencies.append('tf')
        if not 'dynamic_reconfigure' in args.dependencies:
            args.dependencies.append('dynamic_reconfigure')
        if not 'std_msgs' in args.dependencies:
            args.dependencies.append('std_msgs')
    try:
        package_name = args.name[0]
        target_path = os.path.join(parent_path, package_name)
        package_template = PackageTemplate._create_package_template(
            package_name=package_name,
            description=args.description,
            licenses=args.license or [],
            maintainer_names=args.maintainer,
            author_names=args.author,
            version=args.pkg_version,
            catkin_deps=args.dependencies,
            system_deps=args.sys_deps,
            boost_comps=args.boost_comps)
        create_package_files(target_path=target_path,
                             package_template=package_template,
                             rosdistro=args.rosdistro,
                             newfiles={})
        print('Successfully created files in %s. Please adjust the values in package.xml.' % target_path)
    except ValueError as vae:
        parser.error(str(vae))

    # TODO: Make some parts optional (dynamic reconfigure?)

    # Now we do our extras
    rp = RosPack()
    try:
        template_path = rp.get_path('catkin_create_pkg_advanced') + '/config'
    except ResourceNotFound:
        print('Could not find catkin_create_pkg_advanced path! Not adding our sweets!')
        return
    print('Taking templates from: ' + template_path)
    print('To be copied to: ' + target_path)
    # Copy all templates
    copy_tree(template_path, target_path)

    # Edit launch folder and example file
    target_path_launch = target_path + '/launch/'
    move(target_path_launch + 'template_rospy.launch',
         target_path_launch + package_name + '_rospy.launch')
    replace_text(target_path_launch + package_name + '_rospy.launch',
                 'package_name', package_name)

    # Edit cpp node launch file
    if use_roscpp:
        move(target_path_launch + 'template_roscpp.launch',
         target_path_launch + package_name + '_roscpp.launch')
        replace_text(target_path_launch + package_name + '_roscpp.launch',
                 'package_name', package_name)

    # Edit config folder and example file
    target_path_config = target_path + '/config/'
    move(target_path_config + 'template_config.yaml',
         target_path_config + package_name + '_config.yaml')
    replace_text(target_path_config + package_name + '_config.yaml',
                 'package_name', package_name)

    # Edit cfg folder and example file
    target_path_cfg = target_path + '/cfg/'
    # By tradition cfg files start with a capital letter
    cfg_filename = package_name[0].upper() + package_name[1:]
    move(target_path_cfg + 'template.cfg',
         target_path_cfg + cfg_filename + '.cfg')
    replace_text(target_path_cfg + cfg_filename + '.cfg',
                 'package_name', package_name)

    # Check catkin_deps to rospy
    #if "rospy" in args.dependencies:

    # Edit src/<pkg_name> folder and init and example
    target_path_src = target_path + '/src/'
    target_path_src_nodename = target_path_src + package_name + '/'
    os.makedirs(target_path_src_nodename)
    # Create __init__.py empty file
    open(target_path_src_nodename + '__init__.py', 'w')
    target_path_python_examples =  target_path + '/example_python/'
    move(target_path_python_examples + 'template_impl.py',
         target_path_src_nodename + package_name + '_impl.py')
    replace_text(target_path_src_nodename + package_name + '_impl.py',
                 'package_name', package_name)

    # Edit scripts folder and example file
    target_path_scripts = target_path + '/scripts/'
    os.makedirs(target_path_scripts)
    move(target_path_python_examples + 'template_node.py',
         target_path_scripts + package_name +  '_node.py')
    replace_text(target_path_scripts + package_name +  '_node.py',
                 'package_name', package_name)

    # Delete examples folder now that we are done with it
    rmtree(target_path_python_examples)

    # Edit setup.py also adding requires
    replace_text(target_path + '/setup.py',
                 'package_name', package_name)
    dependencies_list_as_string = str(args.dependencies)
    replace_text(target_path + '/setup.py',
                 'requires_place_holder', dependencies_list_as_string)

    # Edit rviz folder and empty example

    # Check catkin_deps to rospy

    # Add C++ example files
    if use_roscpp:

        # Where to find cpp template
        target_path_cpp_examples =  target_path + '/example_cpp/'

        # Where src will be copied
        target_path_src = target_path + '/src/'

        # Where include will be copied
        target_path_inc = target_path + '/include/' + package_name + '/'

        # Copy & edit cpp example
        move(target_path_cpp_examples + '/src/template_node.cpp',
             target_path_src + package_name + '_node.cpp')
        replace_text(target_path_src + package_name + '_node.cpp',
                     'package_name', package_name)
        move(target_path_cpp_examples + '/src/template.cpp',
             target_path_src + package_name + '.cpp')
        replace_text(target_path_src + package_name + '.cpp',
                     'package_name', package_name)
        move(target_path_cpp_examples + '/include/template.h',
            target_path_inc + package_name + '.h')
        replace_text(target_path_inc + package_name + '.h',
                     'package_name', package_name)

        # Special care to include dyn reconf header that starts with capital
        replace_text(target_path_src + package_name + '_node.cpp',
			'#include <'+package_name+'/'+package_name+'Config.h>',
			'#include <'+package_name+'/'+cfg_filename+'Config.h>')

        replace_text(target_path_src + package_name + '_node.cpp',
			'typedef '+package_name+'::'+package_name+'Config',
			'typedef '+package_name+'::'+cfg_filename+'Config')

        rmtree(target_path_cpp_examples)

    # Modify CMakeLists.txt to:
    target_path_cmakelists = target_path + '/CMakeLists.txt'

    # Add dynamic reconfigure
    replace_text(target_path_cmakelists,
                 '''# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )''',
'''generate_dynamic_reconfigure_options(
  cfg/''' + cfg_filename + '''.cfg
)''')

    #  - Add python executable
    #  - Add python installation
    replace_text(target_path_cmakelists,
                 '# catkin_python_setup()', 'catkin_python_setup()')
    #  - Add installation of launch and config and rviz

    #  - Add c++ example compilation
    if use_roscpp:

		# Uncomment include dir & add include
        replace_text(target_path_cmakelists,
                 '''include_directories(
  ${catkin_INCLUDE_DIRS}
)''', '''include_directories(
  ${catkin_INCLUDE_DIRS} include
)''')
        # Uncomment add_library & add package_name lib with package_name.cpp
        replace_text(target_path_cmakelists,
                 '''# add_library(''' + package_name + '''
#   src/${PROJECT_NAME}/''' + package_name + '''.cpp
# )''',
                 '''add_library(''' + package_name + '''
  src/''' + package_name + '''.cpp
)''')
        # Uncomment add_executable & add exe package_name_node.cpp
        replace_text(target_path_cmakelists,
                 '# add_executable(' + package_name + '_node src/' + package_name + '_node.cpp)',
                 'add_executable(' + package_name + '_node src/' + package_name + '_node.cpp)')

        # Uncomment add_dependencies for executable dyn reconf deps
        replace_text(target_path_cmakelists,
                 '# add_dependencies(my_test_pkg_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})',
                 'add_dependencies(my_test_pkg_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})')

        # Uncomment target_link_libraries to link package_name lib with executable
        replace_text(target_path_cmakelists,
                 '''# target_link_libraries(''' + package_name + '''_node
#   ${catkin_LIBRARIES}
# )''',
                 '''target_link_libraries(''' + package_name + '''_node
   ${catkin_LIBRARIES} ''' + package_name + '''
)''')


if __name__ == '__main__':
    main()
